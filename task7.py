import random
import os
import time
import matplotlib.pyplot as plt
from colorama import Fore, Back, Style, init

# Ініціалізація colorama
init(autoreset=True)

# Функція для очищення екрану консолі
def clear_console():
    os.system('cls' if os.name == 'nt' else 'clear')

# Кількість імітацій
n_simulations = 100000

# Список для підрахунку кількості випадків для кожної суми
sums = [0] * 11  # для сум від 2 до 12 (індексація з 0, тому для 2 буде sums[0])

# Імітація кидків двох кубиків
for _ in range(n_simulations):
    die1 = random.randint(1, 6)  # випадкове число на першому кубику
    die2 = random.randint(1, 6)  # випадкове число на другому кубику
    total_sum = die1 + die2     # сума чисел на обох кубиках
    sums[total_sum - 2] += 1    # збільшуємо лічильник для відповідної суми

# Обчислення ймовірностей для кожної суми
probabilities = [x / n_simulations for x in sums]

# Аналітичні ймовірності згідно з вашою таблицею
analytical_probabilities = [
    2.78, 5.56, 8.33, 11.11, 13.89, 16.67, 13.89, 11.11, 8.33, 5.56, 2.78
]

# Очищаємо екран
clear_console()

# Псевдографіка перед виведенням результатів
print(Fore.GREEN + "###########################################################")
print(Fore.YELLOW + "#              Задача: Порівняння ймовірностей           #")
print(Fore.GREEN + "###########################################################")
print("\n")
print(Fore.CYAN + "Опис задачі:")
print("Завдання полягає в порівнянні ймовірностей можливих сум при киданні двох кубиків, отриманих за допомогою методу Монте-Карло, з аналітичними ймовірностями.")
print("Ми симулюємо багато кидків двох кубиків, обчислюємо суми чисел, що випали, підраховуємо, скільки разів з'являється кожна сума, а потім обчислюємо ймовірності для кожної суми.")
print("Також ми порівнюємо ці ймовірності з аналітичними значеннями для кожної можливої суми.\n")

# Пояснення розрахунків
print(Fore.CYAN + "Як відбуваються розрахунки:")
print("1. Створюється імітація 100,000 кидків двох кубиків, де для кожного кидка визначається сума чисел на кубиках.")
print("2. Для кожної можливої суми (від 2 до 12) підраховується, скільки разів вона з'являється серед усіх кидків.")
print("3. Ймовірність кожної суми обчислюється як відношення кількості випадків для цієї суми до загальної кількості кидків.")
print("4. Порівнюються отримані за допомогою методу Монте-Карло ймовірності з аналітичними значеннями.\n")

# Псевдографіка таблиці з ймовірностями
print(Fore.GREEN + "###############################################################################")
print(Fore.YELLOW + "#     Сума     | Ймовірність (Метод Монте-Карло)   | Ймовірність (Аналітика)  #")
print(Fore.GREEN + "###############################################################################")

for i, sum_val in enumerate(range(2, 13)):
    print(Fore.YELLOW + f"# {sum_val:<10} | {Fore.MAGENTA}{probabilities[i] * 100:<30.4f} | {Fore.BLUE}{analytical_probabilities[i]:<25.2f}     #")

print(Fore.GREEN + "###############################################################################")

# Пауза перед побудовою графіка
time.sleep(2)

# Побудова графіку порівняння ймовірностей
sums_range = list(range(2, 13))

# Створюємо графік
plt.bar(sums_range, probabilities, alpha=0.7, label='Метод Монте-Карло')
plt.plot(sums_range, [x / 100 for x in analytical_probabilities], 'r-', marker='o', label='Аналітичні розрахунки')
plt.xlabel('Сума')
plt.ylabel('Ймовірність')
plt.title('Порівняння ймовірностей сум при киданні двох кубиків')
plt.legend()
plt.show()

# Виведення висновків
print(Fore.CYAN + "\nВисновки:")
print(Fore.GREEN + "Загалом, результати методу Монте-Карло добре узгоджуються з аналітичними ймовірностями для всіх можливих сум.")
print(Fore.YELLOW + "Маленькі відхилення між отриманими ймовірностями та аналітичними значеннями можуть бути пов'язані з випадковістю в результатах симуляції.")
print(Fore.RED + "З часом, при збільшенні кількості імітацій, відхилення повинні зменшуватися, що підтверджує правильність методу Монте-Карло.")
print(Fore.GREEN + "Ці результати демонструють, що метод Монте-Карло може бути ефективним для оцінки ймовірностей, коли точні аналітичні методи важко застосувати.")
